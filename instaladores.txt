#!/bin/bash
vpspackversion=5.8
OS=`uname -m`;
host=`hostname`;
ip=`cat /etc/VpsPackdir/ip`;
distribution=`( lsb_release -ds || cat /etc/*release || uname -om ) 2>/dev/null | head -n1`;
os_version=$(awk '/DISTRIB_RELEASE=/' /etc/*-release | sed 's/DISTRIB_RELEASE=//' | sed 's/[.]0/./');
memorialibre=`awk '/^Mem/ {printf($4);}' <(free -m)`;
memoriauso=`awk '/^Mem/ {printf($3);}' <(free -m)`;
memoriatotal=`awk '/^Mem/ {printf($2);}' <(free -m)`;
memoriacache=`awk '/^Mem/ {printf($6);}' <(free -m)`;
memoriacore=`printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)"`;
processor=$(cat /proc/cpuinfo | grep "model name" | uniq | awk -F ":" '{print $2}');
xiptables=`if iptables -L |grep torrent 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xssh=`if netstat -tunlp |grep ssh 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xsquid=`if netstat -tunlp |grep squid 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xiodine=`if netstat -tunlp |grep iodined 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xstunnel=`if netstat -tunlp |grep stunnel 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xbadvpn=`if netstat -tunlp |grep badvpn 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xdropbear=`if netstat -tunlp |grep dropbear 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xssh=`if netstat -tunlp |grep ssh 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xshadowsocks=`if netstat -tunlp |grep ss-server 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xwebmin=`if netstat -tunlp |grep webmin 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xpython=`if netstat -tunlp |grep python 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xopenvpn=`if netstat -tunlp |grep openvpn 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xsocks5=`if netstat -tunlp |grep danted 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xsockd=`if netstat -tunlp |grep sockd 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xmicro=`if netstat -tunlp |grep microsocks 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xnginx=`if netstat -tunlp |grep nginx 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xdns=`if netstat -tunlp |grep dotnet 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xv2ray=`if netstat -tunlp |grep v2ray 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xmulti=`if netstat -tunlp |grep sslh 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xcloak=`if netstat -tunlp |grep ck-server 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
xiptables=`if iptables -L |grep torrent 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
clashserver(){
echo -e "\033[1;33m Se instalará el servidor de \033[1;32mClash\033[0m"
echo -e "\033[1;33m Debes tener instalado previamente \033[1;32mGO Lang\033[0m"
echo -e "\033[1;33m Debes tener instalado previamente \033[1;32mTrojan Server\033[0m"
echo -e "\033[1;33m IMPORTANTE DEBES TENER LIBRES PUERTOS \033[1;32m7890 / 7891 / 7892 / 9090\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
killall clash 1> /dev/null 2> /dev/null
echo -e "Δ Instalando Servidor Clash"
go get -u -v github.com/Dreamacro/clash 1> /dev/null 2> /dev/null
clear
echo -e "Δ Creando Directorios y Archivos"
mkdir /root/.config 1> /dev/null 2> /dev/null
mkdir /root/.config/clash 1> /dev/null 2> /dev/null
curl -o /root/.config/clash/config.yaml https://raw.githubusercontent.com/kirrathmx/dl/master/c.yaml 1> /dev/null 2> /dev/null
clear
figlet -p -f smslant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;33mΔ Escriba el puerto de Trojan Server"
read -p ": " troport
sed -i "s/puertodelservidor/$troport/g" /root/.config/clash/config.yaml
sed -i "s/ipdelservidor/$ip/g" /root/.config/clash/config.yaml
echo -e "\033[1;33mΔ Escriba el password de Trojan Server"
read -p ": " tropass
sed -i "s/clavedelservidor/$tropass/g" /root/.config/clash/config.yaml
echo -e "\033[1;33mΔ Escriba el SNI de su metodo"
read -p ": " trosni
sed -i "s/snidelmetodo/$trosni/g" /root/.config/clash/config.yaml
echo -e "Δ Iniciando Servidor"
screen -dmS clashse clash
cp /root/.config/clash/config.yaml /var/www/html/clash.yaml
clear
figlet -p -f smslant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;33mClash Server Instalado"
echo -e "\033[1;32mRuta de Configuracion: /root/.config/clash/config.yaml"
echo -e "\033[1;32mRuta de archivo de importacion de servidor Clash: http://$ip:85/clash.yaml"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack
fi
}
trojanserver(){
echo -e "\033[1;33m Se instalará el servidor de Trojan\033[0m"
echo -e "\033[1;33m Si ya tenías una instalacion Previa, esta se eliminara\033[0m"
echo -e "\033[1;33m Debes tener instalado previamente GO Lang\033[0m"
echo -e "\033[1;33m IMPORTANTE DEBES TENER LIBRES PUERTOS 80 / 443\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
killall trojan
bash -c "$(wget -O- https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)"
clear
echo -e "Δ Generando Certificados SSL"
mkdir /etc/VpsPackdir/trojancert 1> /dev/null 2> /dev/null
curl -o /usr/local/etc/trojan/config.json https://raw.githubusercontent.com/powermx/dl/master/config.json 1> /dev/null 2> /dev/null
openssl genrsa 2048 > /etc/VpsPackdir/trojancert/trojan.key
chmod 400 /etc/VpsPackdir/trojancert/trojan.key
openssl req -new -x509 -nodes -sha256 -days 365 -key /etc/VpsPackdir/trojancert/trojan.key -out /etc/VpsPackdir/trojancert/trojan.crt
clear
echo -e "\033[1;37mΔ Generando Configuracion"
sed -i '13i        "cert":"/etc/VpsPackdir/trojancert/trojan.crt",' /usr/local/etc/trojan/config.json
sed -i '14i        "key":"/etc/VpsPackdir/trojancert/trojan.key",' /usr/local/etc/trojan/config.json
figlet -p -f smslant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;33mΔ Escriba el puerto de Trojan Server"
read -p ": " trojanport
sed -i 's/443/'$trojanport'/g' /usr/local/etc/trojan/config.json
echo -e "\033[1;33mΔ Escriba el password de Trojan Server"
read -p ": " trojanpass
sed -i 's/vpspack/'$trojanpass'/g' /usr/local/etc/trojan/config.json
echo -e "\033[1;32mΔ Iniciando Trojan Server"
screen -dmS trojanserv trojan /usr/local/etc/trojan/config.json
clear
figlet -p -f smslant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;33mTrojan Server Instalado"
echo -e "\033[1;33mEl puerto del servidor es: \033[1;32m $trojanport"
echo -e "\033[1;33mEl password del servidor es: \033[1;32m $trojanpass"
echo -e "\033[1;33mSi necesitas cambiar el password edita el archivo o Reinstala tu servidor"
echo -e "\033[1;32mRuta de Configuracion: /usr/local/etc/trojan/config.json"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack
fi
}
psiserver(){
echo -e "\033[1;33m Se instalará el servidor de Psiphon\033[0m"
echo -e "\033[1;33m Si ya tenías una instalacion Previa, esta se eliminara\033[0m"
echo -e "\033[1;33m Debes tener instalado previamente GO Lang\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
rm -rf /root/psi
kill $(ps aux | grep 'psiphond' | awk '{print $2}') 1> /dev/null 2> /dev/null
killall psiphond 1> /dev/null 2> /dev/null
cd /root
mkdir psi
cd psi
psi=`cat /root/psi.txt`;
ship=$(wget -qO- ipv4.icanhazip.com)
curl -o /root/psi/psiphond https://raw.githubusercontent.com/Psiphon-Labs/psiphon-tunnel-core-binaries/master/psiphond/psiphond 1> /dev/null 2> /dev/null
chmod 777 psiphond
echo -e "\033[1;33m Escribe el puerto para Psiphon SSH:\033[0m"
read -p ": " sh
echo -e "\033[1;33m Escribe el puerto para Psiphon OSSH:\033[0m"
read -p ": " osh
echo -e "\033[1;33m Escribe el puerto para Psiphon FRONTED-MEEK:\033[0m"
read -p ": " fm
echo -e "\033[1;33m Escribe el puerto para Psiphon UNFRONTED-MEEK:\033[0m"
read -p ": " umo
./psiphond --ipaddress $ship --protocol SSH:$sh --protocol OSSH:$osh --protocol FRONTED-MEEK-OSSH:$fm --protocol UNFRONTED-MEEK-OSSH:$umo generate
chmod 666 psiphond.config
chmod 666 psiphond-traffic-rules.config
chmod 666 psiphond-osl.config
chmod 666 psiphond-tactics.config
chmod 666 server-entry.dat
cat server-entry.dat >> /root/psi.txt
screen -dmS psiserver ./psiphond run
cd /root
echo -e "\033[1;33m LA CONFIGURACION DE TU SERVIDOR ES:\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;32m $psi \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;33m PROTOCOLOS HABILITADOS:\033[0m"
echo -e "\033[1;33m → SSH:\033[1;32m $sh \033[0m"
echo -e "\033[1;33m → OSSH:\033[1;32m $osh \033[0m"
echo -e "\033[1;33m → FRONTED-MEEK-OSSH:\033[1;32m $fm \033[0m"
echo -e "\033[1;33m → UNFRONTED-MEEK-OSSH:\033[1;32m $umo \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e " "
echo -e "\033[1;33m DIRECTORIO DE ARCHIVOS:\033[1;32m /root/psi \033[0m"
fi
}
function tcpd(){
echo -e "A continuacion se instalara el TCP DNS"
echo -e "Este paquete solo funcionara en Debian/Ubuntu"
echo -e "AVISO!!!"
echo -e "Para realizar la instalacion de TCP DNS"
echo -e "Debes configurar previamente tu DNS/Dominio"
echo -e "Si aun no lo haz configurado el DNS/Dominio"
echo -e "Presiona CTRL + C para cancelar la instalacion"
echo -e "Si ya configuraste tu DNS/Dominio Correctamente, presiona ENTER"
read -p " "
echo -e "Espera un momento..."
echo -e "Limpiando DNS Primario..."
sleep 3
sed -i '/DNSStubListener/d' /etc/systemd/resolved.conf
echo -e "Agregando Fix DNS Primario..."
sleep 3
echo "DNSStubListener=no" >> /etc/systemd/resolved.conf
echo -e "Reiniciando DNS Primario..."
sleep 3
ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
systemctl restart systemd-resolved
echo -e "Instalando paquetes Necesarios, espere... "
sleep 3
apt-get install python-pip -y 1> /dev/null 2> /dev/null
apt-get install libevent-dev -y 1> /dev/null 2> /dev/null
apt-get install python-gevent -y 1> /dev/null 2> /dev/null
apt-get install python-daemon -y 1> /dev/null 2> /dev/null
git clone https://github.com/henices/Tcp-DNS-proxy.git 1> /dev/null 2> /dev/null
cd Tcp-DNS-proxy/
wget https://raw.githubusercontent.com/serverdensity/python-daemon/master/daemon.py
chmod +x ./install.sh
./install.sh
screen -dmS tcpdns python tcpdns.py -f tcpdns.json.example
cd /root
echo -e "TCP DNS Instalado"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function iodineins(){
echo -e "A continuacion se instalara el Iodine"
echo -e "Este paquete solo funcionara en Debian/Ubuntu"
echo -e "AVISO!!!"
echo -e "Para realizar la instalacion de iodine DNS"
echo -e "Debes configurar previamente tu DNS/Dominio"
echo -e "Si aun no lo haz configurado el DNS/Dominio"
echo -e "Presiona CTRL + C para cancelar la instalacion"
echo -e "Si ya configuraste tu DNS/Dominio Correctamente, presiona ENTER"
read -p " "
echo -e "Espera un momento..."
echo -e "Limpiando DNS Primario..."
sleep 3
sed -i '/DNSStubListener/d' /etc/systemd/resolved.conf
echo -e "Agregando Fix DNS Primario..."
sleep 3
echo "DNSStubListener=no" >> /etc/systemd/resolved.conf
echo -e "Reiniciando DNS Primario..."
sleep 3
ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
systemctl restart systemd-resolved
echo -e "Instalando paquetes Necesarios"
sleep 3
apt-get install -y iodine 1> /dev/null 2> /dev/null
echo -e "Añadiendo reglas de Firewall..."
sleep 3
sysctl -w net.ipv4.ip_forward=1
/sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
/sbin/iptables -A FORWARD -i eth0 -o dns0 -m state --state RELATED,ESTABLISHED -j ACCEPT
/sbin/iptables -A FORWARD -i dns0 -o eth0 -j ACCEPT
echo -e "Iniciando Iodine DNS"
echo -e "⎇⇥ Escriba el nombre de tu DNS Publico"
echo -e "⎇⇥ Eg: dns.pwrmx.com"
read -p ": " iodns
echo -e "⎇⇥ Escriba el password para su servicio Iodine"
read -p ": " iopass
screen -dmS iopro iodined -c -f -P $iopass 10.0.0.1 $iodns
echo -e "Servicio iodine instalado"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function webssh(){
echo -e "A continuacion se instalara el Web SSH"
echo -e "Este paquete solo funcionara en Debian/Ubuntu"
echo -e "espera un momento..."
pip install webssh
clear
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "La instalacion basica ha finalizado"
echo -e "Se ha instalado correctamente: Web SSH"
}
function v2raypanel2(){
bash <(curl -Ls https://blog.sprov.xyz/v2-ui.sh)
}
function v2raypanel(){
wget -N --no-check-certificate https://raw.githubusercontent.com/kirrathmx/V2ray.Fun/master/install.sh 1> /dev/null 2> /dev/null && bash install.sh
}
function installbbrplus(){
echo -e "Instalando BBR Plus"
echo -e ""
echo -e "Considere que si la Instalacion falla, el VPS se tendrá que formatear"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR o CTRL + C PARA CANCELAR\033[0m"
read -p " "
cd /etc/VpsPackdir/
./bbrplus.sh
}
function installbbr(){
echo -e "Instalando BBR"
wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh
rm bbr.sh
}
function panelssr(){
echo -e "Instalando Panel SSR"
cd /root
wget https://raw.githubusercontent.com/kirrathmx/dl/master/ssrrmu.sh
chmod +x /root/ssrrmu.sh
bash ssrrmu.sh
}
function panelssh(){
echo -e "Instalando Panel SSH Plus"
cd /root
wget -o /dev/null -O- https://raw.githubusercontent.com/kirrathmx/dl/master/panel/panelsshplus.sh > /root/panelsshplus.sh
chmod +x /root/panelsshplus.sh
bash panelsshplus.sh
}
function cloakins(){
curl -o Shadowsocks-Cloak-Installer.sh -L https://git.io/fjECg && bash Shadowsocks-Cloak-Installer.sh && rm Shadowsocks-Cloak-Installer.sh
}
function v2rayinspwr(){
echo -e "Se instalará la version Modificiada de V2ray"
echo -e "Este Mod no puede funcionar correctamente en conjunto con el original"
echo -e "Continuar?"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
curl -o multi-v2ray.sh -L https://git.io/JeSZL && bash multi-v2ray.sh && rm multi-v2ray.sh
fi
}
function v2rayins(){
source <(curl -sL https://multi.netlify.com/v2ray.sh)
}
function dnsserver(){
echo -e "Instalando DNS Server WEB"
curl -sSL https://download.technitium.com/dns/install-ubuntu.sh | bash 1> /dev/null 2> /dev/null
echo -e "Actualizando DNS del Servidor"
echo -e "DNS Server Instalado"
echo -e "Consola Web DNS Server: http://'$ip':5380/"
echo -e "No olvide establecer su password admin del Panel"
}
function microsocks (){
killall microsocks
echo -e "Instalando Microsocks espere.."
cd /etc/VpsPackdir/
rm -rf /etc/VpsPackdir/microsocks/ 1> /dev/null 2> /dev/null
git clone http://github.com/rofl0r/microsocks.git 1> /dev/null 2> /dev/null
cd /etc/VpsPackdir/microsocks/
make 1> /dev/null 2> /dev/null
make install 1> /dev/null 2> /dev/null
cd /root
echo -e "⎇⇥ Escriba un nombre de usuario nuevo"
read -p ": " microuser
useradd --shell /usr/sbin/nologin $microuser
echo -e "⎇⇥ Asigna un password para la cuenta microsocks, repitelo dos veces"
passwd $microuser
echo -e "⎇⇥ Escribe el mismo password asignado nuevamente"
read -p ": " clavemicro
echo -e "⎇⇥ Escribe un puerto libre para Microsocks"
read -p ": " puertomicro
if lsof -Pi :$puertomicro -sTCP:LISTEN -t >/dev/null ; then
echo "Ya esta en uso ese puerto"
else
screen -dmS micro microsocks -1 -i 0.0.0.0 -p $puertomicro -u $microuser -P $clavemicro -b bindaddr
clear
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     ☬ VPSPack v. $vpspackversion ☬     】\033[0m"
echo -e "╼╼╼╼⌁⌁⌁◅⌁▻⌁⌁⌁╾╾╾╾"
echo -e "⌬ Servidor Socks5 [ microsocks ] iniciado"
echo -e "⌁ IP : $ip"
echo -e "⌁ Puerto : $puertomicro"
echo -e "⌁ Usuario : $microuser"
echo -e "⌁ Password : $clavemicro"
fi
}
function socks5alter(){
echo -e "Instalando Sockd espere..."
cd /etc/VpsPackdir/ 1> /dev/null 2> /dev/null
rm /etc/VpsPackdir/dante-1.4.1.tar.gz 1> /dev/null 2> /dev/null
wget --no-check-certificate https://www.inet.no/dante/files/dante-1.4.1.tar.gz 1> /dev/null 2> /dev/null
tar -zxvf dante-1.4.1.tar.gz 1> /dev/null 2> /dev/null
cd /etc/VpsPackdir/dante-1.4.1/ 1> /dev/null 2> /dev/null
mkdir /home/dante 1> /dev/null 2> /dev/null
./configure --prefix=/home/dante 1> /dev/null 2> /dev/null
make 1> /dev/null 2> /dev/null
make install 1> /dev/null 2> /dev/null
wget -O /home/dante/danted.conf https://raw.githubusercontent.com/kirrathmx/dl/master/dante.txt 1> /dev/null 2> /dev/null
echo -e "Escribe un puerto para Sockd"
read -p ": " sockcincox
if lsof -Pi :$sockcincox -sTCP:LISTEN -t >/dev/null ; then
echo "Ya esta en uso ese puerto"
else
sed -i '2i internal: 0.0.0.0 port = '"$sockcincox"'' /home/dante/danted.conf
sed -i '3i external: '"$ip"'' /home/dante/danted.conf
sleep 5
echo "Finalizando Instalacion"
screen -dmS sockdx /home/dante/sbin/sockd -f /home/dante/danted.conf
sleep 5
vpspack
fi
}
function socks5(){
echo -e "Instalando Socks5 espere..."
bash /etc/VpsPackdir/danted.sh
echo -e "Escribe un puerto para Socks5"
read -p ": " sockcinco
if lsof -Pi :$sockcinco -sTCP:LISTEN -t >/dev/null ; then
echo "Ya esta en uso ese puerto"
else
sed -i '2i internal: 0.0.0.0 port = '"$sockcinco"'' /etc/danted.conf
sed -i '3i external: '"$ip"'' /etc/danted.conf
sleep 5
echo "Finalizando Instalacion"
/etc/init.d/danted start
sleep 5
fi
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function openvpnweb16(){
echo -e "Se instalara OpenVPN Web Panel para Ubuntu 16 x64"
echo -e "Para su instalacion se requiere libre el puerto 443 y 943"
echo -e "Para continuar presiona cualquier tecla o Ctrl + C para cancelar la instalacion"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
/etc/init.d/openvpn stop
curl -O http://swupdate.openvpn.org/as/openvpn-as-2.5.2-Debian9.amd_64.deb
sudo dpkg -i openvpn-as-*.deb
rm openvpn-as-*.deb
echo -e "El usuario Administrador por default es : openvpn"
echo -e "Escriba el passwd para el usuario openvpn"
passwd openvpn
}
function openvpnweb18(){
echo -e "Se instalara OpenVPN Web Panel para Ubuntu 18 x64"
echo -e "Para su instalacion se requiere libre el puerto 443 y 943"
echo -e "Para continuar presiona cualquier tecla o Ctrl + C para cancelar la instalacion"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
/etc/init.d/openvpn stop
wget --no-check-certificate https://openvpn.net/downloads/openvpn-as-latest-ubuntu18.amd_64.deb
curl -O http://swupdate.openvpn.org/as/openvpn-as-2.5.2-Debian9.amd_64.deb
sudo dpkg -i openvpn-as-*.deb
rm openvpn-as-*.deb
echo -e "El usuario Administrador por default es : openvpn"
echo -e "Escriba el passwd para el usuario openvpn"
passwd openvpn
}
function estadisticas(){
clear
if [[ $1 == "" ]]
then
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist:	$distribution › Version: $os_version\033[0m"
echo -e "\033[1;37m › IP VPS:       $ip \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m       VPSPack $vpspackversion @ ESTADISTICAS \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m Estos paquetes consumen grandes cantidades de datos\033[1;33m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m Se recomienda instalar en VPS con servicio Unmetered\033[1;33m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m] DARKSTAT \033[1;33m
[\033[1;32m2\033[1;33m] NETDATA \033[1;33m
[\033[1;32m3\033[1;33m] GLANCES \033[1;33m
[\033[1;32m4\033[1;33m] VNSTAT \033[1;33m
[\033[1;32m5\033[1;33m] NTOPNG \033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
1)
darkstat;;
2)
netdata;;
3)
glances;;
4)
vnstat;;
5)
ntopngins;;
0)
vpspack;;
esac
}
function darkstat(){
clear
echo "Instalando DarkStat"
apt-get install -y darkstat 1> /dev/null 2> /dev/null
echo "Iniciando DarkStat en puerto 666"
darkstat -i eth0 -p 666
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function netdata(){
clear
echo "Instalando NetData"
apt-get install -y zlib1g-dev uuid-dev libmnl-dev gcc make autoconf autoconf-archive autogen automake pkg-config curl 1> /dev/null 2> /dev/null
apt-get install -y python python-yaml python-mysqldb python-psycopg2 nodejs lm-sensors netcat 1> /dev/null 2> /dev/null
git clone https://github.com/firehol/netdata.git --depth=1 ~/netdata
cd ~/netdata
./netdata-installer.sh
cd /root
echo "Estadisticas de Netdata instaladas en puerto: 19999"
echo "http://your_server_ip:19999"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function glances(){
clear
echo "Instalando Glances"
apt-get install -y glances 1> /dev/null 2> /dev/null
echo "Para iniciar las estadisticas con Glances escriba : glances"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function vnstat(){
clear
echo "Instalando Vnstat"
apt-get install -y vnstat 1> /dev/null 2> /dev/null
echo "Para iniciar las estadisticas escriba : vnstat"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function ntopngins(){
echo -e "A continuacion se instalar el paquete NTOPNG"
echo -e "Al finalizar dicha instalacion, el servicio"
echo -e "Quedara instalado en el puerto 3000"
echo -e "Podra accesar a NTOPNG desde la web usando:"
echo -e "http://ip:3000"
echo -e ""
echo -e "Por default el usuario y passwd son : admin"
echo -e "\033[1;31mPRESIONE ENTER PARA COMENZAR INSTALACION\033[0m"
read -p " "
apt-get install ntopng -y 1> /dev/null 2> /dev/null
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function libs32(){
dpkg --add-architecture i386
apt-get update
apt-get install libc6:i386 libstdc++6:i386
clear
echo -e "\033[1;31mLIBRERIAS INSTALADAS, PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function nginx(){
echo "Desinstalando nginx"
apt-get remove nginx
echo "Instalando nginx"
apt-get -y install nginx
rm /etc/nginx/sites-enabled/default
rm /etc/nginx/sites-available/default
wget --no-check-certificate -O /etc/nginx/nginx.conf "https://raw.githubusercontent.com/powermx/autoscript/master/nginx.conf"
mkdir -p /home/vps/public_html
echo "<pre>1 + 1 = 2</pre>" > /home/vps/public_html/index.html
wget --no-check-certificate -O /etc/nginx/conf.d/vps.conf "https://raw.githubusercontent.com/powermx/autoscript/master/vps.conf"
service nginx restart
echo "Instalacion Finalizada"
echo "Verfique la instalacion accesando a $ip:81"
echo "La carpeta de archivos se encuentra en la siguiente ruta:"
echo "/home/vps/public_html"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function openvpn(){
clear
if [[ $1 == "" ]]
then
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist:	$distribution › Version: $os_version\033[0m"
echo -e "\033[1;37m › IP VPS:       $ip \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m       VPSPack $vpspackversion @ OPENVPN \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m]   › OPENVPN TLS \033[1;33m
[\033[1;32m2\033[1;33m]   › OPENVPN AUTH \033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR                 \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
1)
openvpntls;;
2)
openvpnauth;;
0)
vpspack 10;;
esac
}
function openvpnauth(){
cd /etc/VpsPackdir/ && bash openvpn-auth.sh
}
function openvpntls(){
clear
cd /etc/VpsPackdir/ && bash openvpn-install.sh && cd /root
}
function installdropbear(){
clear
if [[ $1 == "" ]]
then
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist:	$distribution › Version: $os_version\033[0m"
echo -e "\033[1;37m › IP VPS:       $ip \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m - INSTALADOR DROPBEAR - \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione su Sistema:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m] Ubuntu \033[1;33m
[\033[1;32m2\033[1;33m] Debian \033[1;33m
[\033[1;32m3\033[1;33m] CentOS \033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR                 \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
1)
dropbearuniversal;;
2)
dropbearuniversal;;
3)
dropbearcentos;;
0)
vpspack;;
esac
}
function dropbearuniversal(){
clear
echo "› Preparando Instalacion"
service dropbear stop 1> /dev/null 2> /dev/null
killall dropbear 1> /dev/null 2> /dev/null
apt-get -y purge dropbear
apt-get -y remove dropbear
echo "› Instalando Dropbear"
apt-get -y install dropbear
rm /etc/default/dropbear
cp /etc/VpsPackdir/confdropbear /etc/default/dropbear
echo -e "\033[1;31m › ESCRIBE UN PUERTO PARA DROPBEAR\033[0m"
echo -e "\033[1;31m › RECOMENDADO 443\033[0m"
read -p "› : " puertodropbear
sed -i '2i DROPBEAR_PORT="'"$puertodropbear"'"' /etc/default/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
service dropbear restart
echo -e "\033[1;33m › INSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function dropbear14(){
clear
echo "› Preparando Instalacion"
service dropbear stop 1> /dev/null 2> /dev/null
killall dropbear 1> /dev/null 2> /dev/null
apt-get -y purge dropbear
apt-get -y remove dropbear
echo "› Instalando Dropbear"
apt-get -y install dropbear
rm /etc/default/dropbear
cp /etc/VpsPackdir/confdropbear /etc/default/dropbear
echo -e "\033[1;31m › ESCRIBE UN PUERTO PARA DROPBEAR\033[0m"
echo -e "\033[1;31m › RECOMENDADO 443\033[0m"
read -p "› : " puertodropbear
sed -i '2i DROPBEAR_PORT="'"$puertodropbear"'"' /etc/default/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
service dropbear restart
echo -e "\033[1;33m › INSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function dropbear16(){
clear
echo "› Preparando Instalacion"
service dropbear stop 1> /dev/null 2> /dev/null
killall dropbear 1> /dev/null 2> /dev/null
apt-get -y purge dropbear
apt-get -y remove dropbear
echo "› Instalando Dropbear"
apt-get -y install dropbear=2016.72-1
rm /etc/default/dropbear
cp /etc/VpsPackdir/confdropbear /etc/default/dropbear
echo -e "\033[1;31m › ESCRIBE UN PUERTO PARA DROPBEAR\033[0m"
echo -e "\033[1;31m › RECOMENDADO 443\033[0m"
read -p "› : " puertodropbear
sed -i '2i DROPBEAR_PORT="'"$puertodropbear"'"' /etc/default/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
service dropbear restart
echo -e "\033[1;33m › INSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function dropbeardebian9(){
clear
echo "Instalando Dropbear"
apt-get -y purge dropbear
apt-get -y install dropbear=2016.74-5
clear
sed -i 's/NO_START=1/NO_START=0/g' /etc/default/dropbear
sed -i 's/DROPBEAR_PORT=22/DROPBEAR_PORT=443/g' /etc/default/dropbear
echo "/bin/false" >> /etc/shells
echo "/usr/sbin/nologin" >> /etc/shells
service dropbear restart
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function dropbearcentos(){
clear
echo "Instalando Dropbear"
yum -y remove dropbear
wget http://ftp-stud.hs-esslingen.de/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm 1> /dev/null 2> /dev/null
rpm -Uvh epel-release-6-8.noarch.rpm
yum -y install dropbear
mkdir /etc/sysconfig
wget --no-check-certificate https://raw.githubusercontent.com/powermx/dropbearcentos/master/dropbear > /etc/sysconfig/dropbear
service dropbear restart
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function shadowsocks(){
clear
cd /etc/VpsPackdir/ && chmod +x shadowsocks.sh && ./shadowsocks.sh 2>&1 | tee shadowsocks.log && cd /root
}
function python(){
clear
echo -e "Instalando Paquetes Necesarios"
apt-get -y install screen 1> /dev/null 2> /dev/null
apt-get -y install python3-pip 1> /dev/null 2> /dev/null
apt-get -y install python 1> /dev/null 2> /dev/null
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function webmin(){
echo "Instalando Webmin"
cd /root
wget http://prdownloads.sourceforge.net/webadmin/webmin_1.941_all.deb
dpkg -i --force-all webmin_1.941_all.deb;
apt-get -y -f install;
sed -i 's/ssl=1/ssl=0/g' /etc/webmin/miniserv.conf
rm /root/webmin_1.941_all.deb
service webmin restart
echo "Panel Webmin Instalado en el Puerto: 10000"
echo "URL $ip:10000"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function stunnel(){
clear
echo "Instalando Stunnel, Espere..."
bash /etc/VpsPackdir/stunnel
}
function fail2ban(){
echo "Instalando Fail2Ban ... Espere"
apt-get -y install fail2ban 1> /dev/null 2> /dev/null
service fail2ban restart 1> /dev/null 2> /dev/null
echo "Fail2Ban Instalado"
}
function badvpnstop(){
killall badvpn-udpgw
echo -e "Se han detenido todos los procesos de BadVPN"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
vpspack 10
}
function badvpnalternativo(){
echo "Instalando BADVPN Alterno"
wget --no-check-certificate https://raw.githubusercontent.com/powermx/badudp/master/install && bash install
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
badvpnport(){
wget --no-check-certificate https://raw.githubusercontent.com/powermx/badvpn/master/easyinstall 1> /dev/null 2> /dev/null && bash easyinstall && badvpn start
echo -e "Que nuevo puerto deseas agregar en BadVPN"
read -p ">:" badop
badvpn-udpgw --listen-addr 127.0.0.1:$badop --max-clients 1000 --max-connections-for-client 250 > /dev/null &
echo -e "Se ha iniciado un nuevo puerto BadVPN : $badop"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function badvpn_install(){
wget --no-check-certificate https://raw.githubusercontent.com/powermx/badvpn/master/easyinstall 1> /dev/null 2> /dev/null && bash easyinstall && badvpn start
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function badup(){
echo -e "Instalando BadVPN - UDP"
echo -e "Limpiando ..."
killall badvpn-udpgw
cd /etc/VpsPackdir/
echo -e "Instalando Paquetes, Espere..."
bash badudp.sh
echo -e "Iniciando BadVPN"
screen -dmS badu badudp
cd ~
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
vpspack 10
}
function badvpncron(){
echo -e "\033[1;33m Esta opcion activara la opcion de verficacion de BADVPN\033[0m"
echo -e "\033[1;33m Continuar?\033[0m"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo "*/10 * * * * root /etc/VpsPackdir/badvpncron.sh" >> /etc/crontab
service cron restart
echo -e "Cron BadVPN - UDP Activado"
echo -e "Puedes verificar su instalación tecleando : nano /etc/crontab"
echo -e "Puedes verificar su registro en : nano /root/badvpn.log"
fi
echo -e "\033[1;31mPRESIONE ENTER PARA FINALIZAR\033[0m"
read -p " "
vpspack 10
}
function badvpnmenu(){
clear
if [[ $1 == "" ]]
then
figlet -p -f slant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist:	$distribution › Version: $os_version\033[0m"
echo -e "\033[1;37m › IP VPS:       $ip \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m - INSTALADOR BADVPN - \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione su Sistema:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m] BADVPN NORMAL \033[1;33m
[\033[1;32m2\033[1;33m] BADVPN CUSTOM PORT \033[1;33m
[\033[1;32m3\033[1;33m] BADVPN ALTERNATIVO \033[1;33m
[\033[1;32m4\033[1;33m] BADVPN BADUDP \033[1;33m
[\033[1;32m5\033[1;33m] BADVPN CRON \033[1;33m
[\033[1;32m6\033[1;33m] DETENER BADVPN \033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR                 \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
1)
badvpn_install;;
2)
badvpnport;;
3)
badvpnalternativo;;
4)
badup;;
5)
badvpncron;;
6)
badvpnstop;;
0)
vpspack;;
esac
}
clear
if [[ $1 == "" ]]
then
figlet -p -f smslant < /root/name
echo -e "\033[1;37m      【     ★ VPSPack v. $vpspackversion ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m › Linux Dist: $distribution \033[0m"
echo -e "\033[1;37m › IP Publica VPS:\033[1;32m$ip \033[0m"
echo -e "\033[1;37m › Hostname VPS:\033[1;32m$host \033[0m"
echo -e "\033[1;37m › M: $memoriatotal MB ›Uso: $memoriauso MB ›Libre: $memorialibre MB\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37m     INSTALADORES EXTRAS \033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m ───────────────────────────────────────\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion:    Para Salir Ctrl + C\033[1;33m
[\033[1;32m1\033[1;33m] BADVPN                 ›   \033[1;32m$xbadvpn \033[1;33m
[\033[1;32m2\033[1;33m] FAIL2BAN               ›   \033[1;33m
[\033[1;32m3\033[1;33m] STUNNEL4               ›   \033[1;32m$xstunnel \033[1;33m
[\033[1;32m4\033[1;33m] WEBMIN                 ›   \033[1;32m$xwebmin \033[1;33m
[\033[1;32m5\033[1;33m] PYTHON                 ›   \033[1;32m$xpython \033[1;33m
[\033[1;32m6\033[1;33m] SHADOWSOCKS            ›   \033[1;32m$xshadowsocks \033[1;33m
[\033[1;32m7\033[1;33m] DROPBEAR               ›   \033[1;32m$xdropbear \033[1;33m
[\033[1;32m8\033[1;33m] OPENVPN                ›   \033[1;32m$xopenvpn \033[1;33m
[\033[1;32m9\033[1;33m] NGINX (REINSTALL)      ›   \033[1;32m$xnginx \033[1;33m
[\033[1;32m10\033[1;33m] LIBRERIAS 32BITS      ›   \033[1;33m
[\033[1;32m11\033[1;33m] ESTADISTICAS          ›   \033[1;33m
[\033[1;32m12\033[1;33m] OPENVPN Web Panel 16  ›   \033[1;33m
[\033[1;32m13\033[1;33m] OPENVPN Web Panel 18  ›   \033[1;33m
[\033[1;32m14\033[1;33m] SOCKS5                ›   \033[1;32m$xsocks5 \033[1;33m
[\033[1;32m15\033[1;33m] SOCKS5 (Sockd)        ›   \033[1;32m$xsockd \033[1;33m
[\033[1;32m16\033[1;33m] SOCKS5 (Microsocks)   ›   \033[1;32m$xmicro \033[1;33m
[\033[1;32m17\033[1;33m] DNS Server            ›   \033[1;32m$xdns \033[1;33m
[\033[1;32m18\033[1;33m] V2RAY (Original)      ›   \033[1;32m$xv2ray \033[1;33m
[\033[1;32m19\033[1;33m] V2RAY (PowerMX)       ›   \033[1;32m$xv2ray \033[1;33m
[\033[1;32m20\033[1;33m] V2RAY (Panel Web)     ›   \033[1;32m\033[1;33m
[\033[1;32m21\033[1;33m] V2RAY (Panel Web 2)   ›   \033[1;32m\033[1;33m
[\033[1;32m22\033[1;33m] BBR                   ›   \033[1;32m\033[1;33m
[\033[1;32m23\033[1;33m] BBR PLUS              ›   \033[1;32m\033[1;33m
[\033[1;32m24\033[1;33m] SHADOWSOCKS CLOAK     ›   \033[1;32m$xcloak \033[1;33m
[\033[1;32m25\033[1;33m] WEBSSH                ›   \033[1;32m\033[1;33m
[\033[1;32m26\033[1;33m] IODINE DNS            ›   \033[1;32m\033[1;33m
[\033[1;32m27\033[1;33m] TCP DNS               ›   \033[1;32m\033[1;33m
[\033[1;32m28\033[1;33m] PSIPHON SERVER        ›   \033[1;32m\033[1;33m
[\033[1;32m29\033[1;33m] TROJAN SERVER         ›   \033[1;32m\033[1;33m
[\033[1;32m30\033[1;33m] CLASH SERVER         ›   \033[1;32m\033[1;33m
[\033[1;32m0\033[1;33m] < REGRESAR                 \033[1;33m"
echo -e "\033[1;33m      ⋤⋥ Escriba una opcion:      \033[0m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
1)
badvpnmenu;;
2)
fail2ban;;
3)
stunnel;;
4)
webmin;;
5)
python;;
6)
shadowsocks;;
7)
installdropbear;;
8)
openvpn;;
9)
nginx;;
10)
libs32;;
11)
estadisticas;;
12)
openvpnweb16;;
13)
openvpnweb18;;
14)
socks5;;
15)
socks5alter;;
16)
microsocks;;
17)
dnsserver;;
18)
v2rayins;;
19)
v2rayinspwr;;
20)
v2raypanel;;
21)
v2raypanel2;;
22)
installbbr;;
23)
installbbrplus;;
24)
cloakins;;
25)
webssh;;
26)
iodineins;;
27)
tcpd;;
28)
psiserver;;
29)
trojanserver;;
30)
clashserver;;
0)
vpspack;;
esac